name: CD - Production (Heroku)
on:
  push:
    branches:
      - master
jobs:
  skip_check:
    runs-on: ubuntu-latest
    env:
      HEROKU_APP_NAME: ${{ secrets.PROD_HEROKU_APP_NAME }}
    steps:
      - name: Skip
        if: ${{ !env.HEROKU_APP_NAME }}
        uses: andymckay/cancel-action@0.2
  run_check:
    needs: skip_check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build docker image for testing
        run: docker-compose -f docker-compose.test.yml build
      - name: Run docker-compose to prepare the testing environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 10
      - name: Show docker containers
        run: docker ps
      - name: Rubocop
        run: docker exec ${{ github.event.repository.name }}_web_1 sh -c "bundle exec rubocop"
      - name: Rspec
        run: docker exec ${{ github.event.repository.name }}_web_1 sh -c "bundle exec rspec"
      - name: Failure notification
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2.0.2
        env:
          SLACK_WEBHOOK: ${{ secrets.MSG_SLACK_WEBHOOK }}
          SLACK_USERNAME: CD - Prod (Heroku) - Check failed
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: danger
  run_heroku_deployment:
    needs: run_check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          target_url: ${{ secrets.PROD_HEROKU_APP_URL }}"
          environment: production
      - name: Login to Heroku Container registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:login
      - name: Build and push
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:push -a ${{ secrets.PROD_HEROKU_APP_NAME }} web
      - name: Release
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release -a ${{ secrets.PROD_HEROKU_APP_NAME }} web
      - name: Release Notification
        if: success()
        uses: rtCamp/action-slack-notify@v2.0.2
        env:
          SLACK_WEBHOOK: ${{ secrets.MSG_SLACK_WEBHOOK }}
          SLACK_USERNAME: CD - Prod (Heroku) - Release
          SLACK_ICON_EMOJI: ":rocket:"
          SLACK_MESSAGE: "Here: ${{ secrets.PROD_HEROKU_APP_URL }}"
      - name: Failure notification
        if: failure()
        uses: rtCamp/action-slack-notify@v2.0.2
        env:
          SLACK_WEBHOOK: ${{ secrets.MSG_SLACK_WEBHOOK }}
          SLACK_USERNAME: CD - Prod (Heroku) - Build failed
          SLACK_ICON_EMOJI: ":boom:"
          SLACK_COLOR: danger
      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: ${{ secrets.PROD_HEROKU_APP_URL }}"
          state: "success"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: ${{ secrets.PROD_HEROKU_APP_URL }}"
          state: "failure"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
